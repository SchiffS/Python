According to my textbook on linear algebra, if the matrix A is decomposed into upper- and lower triangular matrices
L and U, then A = LU.  Here is a snippet from Python 3.6.2, Scipy 0.19, windoze 64 bit versions, using the Pascal 4x4 matrix:
>>> P4
array([[ 1,  1,  1,  1],
       [ 1,  2,  3,  4],
       [ 1,  3,  6, 10],
       [ 1,  4, 10, 20]])
>>> (P,L,U) = sp.linalg.lu(P4)
>>> L
array([[ 1.        ,  0.        ,  0.        ,  0.        ],
       [ 1.        ,  1.        ,  0.        ,  0.        ],
       [ 1.        ,  0.66666667,  1.        ,  0.        ],
       [ 1.        ,  0.33333333,  1.        ,  1.        ]])
>>> U
array([[  1.        ,   1.        ,   1.        ,   1.        ],
       [  0.        ,   3.        ,   9.        ,  19.        ],
       [  0.        ,   0.        ,  -1.        ,  -3.66666667],
       [  0.        ,   0.        ,   0.        ,   0.33333333]])
>>> L@U
array([[  1.,   1.,   1.,   1.],
       [  1.,   4.,  10.,  20.],
       [  1.,   3.,   6.,  10.],
       [  1.,   2.,   3.,   4.]])  # note permuted!  S/B = P4
>>> Lp
array([[1, 0, 0, 0],
       [1, 1, 0, 0],
       [1, 2, 1, 0],
       [1, 3, 3, 1]])
>>> Up
array([[1, 1, 1, 1],
       [0, 1, 2, 3],
       [0, 0, 1, 3],
       [0, 0, 0, 1]])
>>> Lp@Up
array([[ 1,  1,  1,  1],
       [ 1,  2,  3,  4],
       [ 1,  3,  6, 10],
       [ 1,  4, 10, 20]])  # the correct answer
>>> P@L@U
array([[  1.,   1.,   1.,   1.],
       [  1.,   2.,   3.,   4.],
       [  1.,   3.,   6.,  10.],
       [  1.,   4.,  10.,  20.]])  # the work-around (but not well tested!
>>> 

We see that if one uses linalg.lu() to do the LU decomposition, then the product is correct only if the permutation
matrix is the identity matrix (no permutations).  BTW, P4, Lp and Up are from Strang, Linear Algebra (5th edition), page 103.
I am sure, based on prior experience dealing with the Jesuits of Python, that the code was done this way intentionally, and
that once again it is linear algebra that is wrong.  Hence no bug report, but a word to the wise!
